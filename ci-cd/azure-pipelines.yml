trigger:
  branches:
    include:
    - main
    - develop
    - devops

resources:
  repositories:
  - repository: appsectemplates
    type: git
    name: DevSecOps/DevSecOps
    #endpoint: CrossOrg-Devsecops

parameters:
    - name: app
      type: string
      default: 'uwazi-orchestrator'
    - name: dockerfile
      type: string
      default: 'Dockerfile'
    - name: DockerRegistryServiceConnection
      type: string
      default: 'uwazi'
    - name: imageRepository
      type: string
      default: 'uwaziorchestrator'
    - name: BuildAgentPool
      type: string
      default: 'UwaziPlatform'
    #the build arg
    - name: docker_build_arguments
      type: object
      default: |
         --build-arg PORT=$(PORT)
         --build-arg ARG_FINGERPRINT_SERVICE_URL=$(FINGERPRINT_SERVICE_URL)

variables:
- name: 'vmImageName'
  value: 'ubuntu-latest'

- name: 'ACR'
  value: 'ghq03532uwaziweudevacr.azurecr.io'

- name: projectName
  value: 'uwazi-orchestrator'

- name: 'sonarName'
  value: 'GHQ_E2E_Supply_Chain_Transformation'

- name: 'checkmarxTeam'
  value: '/CxServer/AB-InBev/GHQ/GHQ_E2E_Supply_Chain_Transformation'

stages:
  - stage: Scan
    displayName: Secure Scan
    jobs:
    - job: SecureScan
      displayName: SecureScan
      variables:
        - group: '${{parameters.app}}'
          # ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
          #   gitLeaksScanMode: prevalidation
          #   scanTemplate: pipeline_templates/Security_tasks/prepareSonarcloudPR.yml@appsectemplates
          # ${{ if eq(variables['Build.Reason'], 'IndividualCI') }}:
          #   gitLeaksScanMode: changes
          #   scanTemplate: pipeline_templates/Security_tasks/prepareSonarCloud.yml@appsectemplates
      pool:
      #  vmImage: 'ubuntu-latest'
        name: UwaziPlatform

      steps:
        - checkout: self
        - checkout: appsectemplates
        - template: pipeline_templates/Security_tasks/prepareSonarCloud.yml@appsectemplates
          parameters:
            SCServiceConnection: 'SonarcloudServer'
            SCProjectKey: $(sonarName)
            SCProjectName: $(sonarName)
            SCBranchName: '$(Build.SourceBranchName)'
            SCBaseDirPath: './$(Build.Repository.Name)'

        - template: pipeline_templates/secure_code_scan.yml@appsectemplates
          parameters:
            scanSonarCloud: true
            sonarCloudGate: false
            SCServiceConnection: 'SonarcloudServer'
            
            scanSnyk: true
            SKFailOnIssues: false
            SkServiceConnection: 'SnykServer'
            SkOrganization: '8f25c312-7878-443b-8dd9-186ba722246e'
            SkAdditionalArgs: '--all-projects --detection-depth=6'       
            scanGitleaks: true
            scanSnykContainer: false
            SkDockerImageName: '$(ACR)/${{parameters.imageRepository}}:$(Build.BuildNumber)'
            SkDockerFilePath: './$(Build.Repository.Name)/Dockerfile'

            scanCheckmarx: true
            CxServiceConnection: 'CheckmarxServer'
            CxPreset: 'ASA_SDLC_Ready'
            CxEnableSyncScan: true
            CxEnableThreshold: false
            CxTeamName: $(checkmarxTeam)

  - stage: Dev
    displayName: DEV
    # dependsOn: Scan
    # condition: and( not(failed()), not(canceled()), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    pool:
      name: ${{parameters.BuildAgentPool}} #'BuildAgentPool'
      demands:  agent.os -equals Linux
    variables:
     - group: '${{parameters.app}}' #uwazi-orchestrator
    jobs:
    - job: Build
      displayName: Build and Push

      steps:
      - task: Docker@2
        displayName: Build
        inputs:
          command: build
          repository: ${{parameters.imageRepository}}
          dockerfile: '$(Build.SourcesDirectory)/${{parameters.dockerfile}}'
          containerRegistry: ${{parameters.DockerRegistryServiceConnection}}
          arguments: |
            ${{parameters.docker_build_arguments}}
          tags: |
            $(Build.BuildNumber)
            latest
        
      - task: Docker@2
        displayName: Push
        inputs:
            command: push
            repository: ${{parameters.imageRepository}}
            containerRegistry: ${{parameters.DockerRegistryServiceConnection}}
            tags: |
              $(Build.BuildNumber)
              latest

      - task: PublishPipelineArtifact@1
        displayName: "Publish manifest artifact"
        inputs:
          targetPath: '$(Build.SourcesDirectory)/manifests/'
          artifact: 'manifests'
          publishLocation: 'pipeline'